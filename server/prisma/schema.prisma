generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  phoneNumber      String       @unique
  name             String?
  email            String?      @unique
  defaultAddressId String?
  addresses        Address[]
  cartItems        CartItem[]
  orders           Order[]
  pushTokens       PushToken[]
  sessions         Session[]
  notifications    Notification[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Session {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  sessionToken      String   @unique
  refreshTokenHash  String
  userAgent         String?
  createdAt         DateTime @default(now())
  expiresAt         DateTime
}

model Address {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  label      String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  latitude   Float
  longitude  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]
}

model ProductCategory {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String?
  heroImageUrl String?
  palette      Json
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id            String            @id @default(cuid())
  category      ProductCategory   @relation(fields: [categoryId], references: [id])
  categoryId    String
  name          String
  slug          String            @unique
  description   String
  imageUrl      String
  nutrition     Json
  isRecommended Boolean           @default(false)
  variants      ProductVariant[]
  addonGroups   AddonGroup[]
  suggestions   ProductSuggestion[] @relation("ProductSuggestions")
  suggestedBy   ProductSuggestion[] @relation("ProductSuggestedBy")
  cartItems     CartItem[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ProductVariant {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  name      String
  price     Decimal  @db.Decimal(10, 2)
  isDefault Boolean  @default(false)
  cartItems CartItem[]
}

enum SelectionType {
  SINGLE
  MULTI
}

model AddonGroup {
  id            String        @id @default(cuid())
  product       Product       @relation(fields: [productId], references: [id])
  productId     String
  name          String
  selectionType SelectionType
  minSelect     Int           @default(0)
  maxSelect     Int           @default(1)
  options       AddonOption[]
}

model AddonOption {
  id         String      @id @default(cuid())
  group      AddonGroup  @relation(fields: [groupId], references: [id])
  groupId    String
  name       String
  priceDelta Decimal     @db.Decimal(10, 2)
  isDefault  Boolean     @default(false)
  cartItems  CartItemAddon[]
}

model ProductSuggestion {
  id              String   @id @default(cuid())
  product         Product  @relation("ProductSuggestions", fields: [productId], references: [id])
  productId       String
  suggestedProduct Product @relation("ProductSuggestedBy", fields: [suggestedProductId], references: [id])
  suggestedProductId String

  @@unique([productId, suggestedProductId], map: "product_suggestion_unique_pair")
}

model CartItem {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  product    Product           @relation(fields: [productId], references: [id])
  productId  String
  variant    ProductVariant    @relation(fields: [variantId], references: [id])
  variantId  String
  quantity   Int
  addons     CartItemAddon[]
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@unique([userId, productId, variantId], map: "unique_cart_item_per_variant")
}

model CartItemAddon {
  id           String      @id @default(cuid())
  cartItem     CartItem    @relation(fields: [cartItemId], references: [id])
  cartItemId   String
  addonOption  AddonOption @relation(fields: [addonOptionId], references: [id])
  addonOptionId String

  @@unique([cartItemId, addonOptionId], map: "unique_addon_per_cart_item")
}

model Coupon {
  id            String   @id @default(cuid())
  code          String   @unique
  description   String?
  discountType  String
  discountValue Decimal  @db.Decimal(10, 2)
  maxDiscount   Decimal? @db.Decimal(10, 2)
  minOrderValue Decimal? @db.Decimal(10, 2)
  startsAt      DateTime?
  expiresAt     DateTime?
  usageLimit    Int?
  usedCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  address        Address     @relation(fields: [addressId], references: [id])
  addressId      String
  status         String      @default("CREATED")
  subtotal       Decimal     @db.Decimal(10, 2)
  tax            Decimal     @db.Decimal(10, 2)
  deliveryFee    Decimal     @db.Decimal(10, 2)
  discount       Decimal     @db.Decimal(10, 2)
  total          Decimal     @db.Decimal(10, 2)
  paymentMethod  String
  paymentStatus  String      @default("PENDING")
  razorpayOrderId String?
  couponCode     String?
  items          OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  productName String
  variantName String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  addons      Json
}

model PushToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  device    String?
  platform  String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  title     String
  body      String
  data      Json?
  createdAt DateTime @default(now())
}

model OtpLog {
  id          String   @id @default(cuid())
  phoneNumber String
  requestId   String   @unique
  createdAt   DateTime @default(now())
  ttl         Int
  codeHash    String
  expiresAt   DateTime
}
